#[cfg(feature = "serde")]
impl serde_utils::InlinedPair for {{ name }} {
    type Key   = {{ key_property_type }};
    type Value = {{ value_property_type }};
    type Error = String;

    fn extract_key(&self) -> &Self::Key {
        return &self.{{ key_property_name }};
    }

    fn from_pair_mapping(k: Self::Key, v: Value) -> Result<Self,Self::Error> {
        let mut map = match v {
            Value::Map(m) => m,
            _ => return Err("ClassDefinition must be a mapping".into()),
        };
        map.insert(Value::String("{{key_property_name}}".into()), Value::String(k));
        let de          = Value::Map(map).into_deserializer();
        match serde_path_to_error::deserialize(de) {
            Ok(ok)  => Ok(ok),
            Err(e)  => Err(format!("at `{}`: {}", e.path(), e.inner())),
        }
    }


{% if can_convert_from_primitive %}        
    fn from_pair_simple(k: Self::Key, v: Self::Value) -> Result<Self,Self::Error> {
        Ok(Self { {{ key_property_name }}: k, {{  value_property_name }}: v })
{% else %}
    fn from_pair_simple(_k: Self::Key, _v: Self::Value) -> Result<Self,Self::Error> {
        Err("Cannot create a {{name}} from a primitive value!".into())
{% endif %}
    }
}
