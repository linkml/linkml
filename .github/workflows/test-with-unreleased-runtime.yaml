name: Test with unreleased linkml-runtime
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      upstream_repo:
        description: "Upstream linkml-runtime repository to test with."
        required: true
        default: "linkml/linkml-runtime"
      upstream_branch:
        description: "Upstream linkml-runtime branch to test with."
        required: true
        default: "main"

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python-version: [ "3.9", "3.13" ]
    runs-on: ${{ matrix.os }}
    env:
      POETRY_VIRTUALENVS_IN_PROJECT: true

    steps:
      - name: Get upstream branch and repo from first lines of PR Body
        if: github.event_name == 'pull_request'
        shell: bash
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          set +e
          set +o pipefail

          UPSTREAM_BRANCH=$( \
            echo "$PR_BODY" | \
            head -2 | \
            grep upstream_branch | \
            cut -d ":" -f 2 | \
            awk '{$1=$1};1' \
          )
          echo "Got upstream branch:"
          echo $UPSTREAM_BRANCH

          if [[ -z "$UPSTREAM_BRANCH" ]]; then
            echo "Using main as default"
            UPSTREAM_BRANCH="main"
          fi

          UPSTREAM_REPO=$( \
            echo "$PR_BODY" | \
            head -2 | \
            grep upstream_repo | \
            cut -d ":" -f 2 | \
            awk '{$1=$1};1' \
          )
          echo "Got upstream repo:"
          echo $UPSTREAM_REPO

          if [[ -z "$UPSTREAM_REPO" ]]; then
            echo "Using linkml/linkml-runtime as default"
            UPSTREAM_REPO="linkml/linkml-runtime"
          fi

          echo "upstream_branch=$UPSTREAM_BRANCH" >> "$GITHUB_ENV"
          echo "upstream_repo=$UPSTREAM_REPO" >> "$GITHUB_ENV"

      - name: Get upstream branch from workflow dispatch
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          echo "upstream_branch=${{ inputs.upstream_branch }}" >> "$GITHUB_ENV"
          echo "upstream_repo=${{ inputs.upstream_repo }}" >> "$GITHUB_ENV"

      - name: checkout upstream linkml-runtime
        uses: actions/checkout@v4
        with:
          repository: "${{ env.upstream_repo }}"
          path: linkml-runtime
          ref: "${{ env.upstream_branch }}"
          fetch-depth: 0

      - name: checkout linkml
        uses: actions/checkout@v4
        with:
          # don't specify repository like this or else we won't get pull request branches correctly
          # repository: linkml/linkml
          path: linkml
          fetch-depth: 0

      - name: Ensure tags for linkml-runtime upstream if a different one than linkml/linkml-runtime is specified
        if: "${{ env.upstream_repo != 'linkml/linkml-runtime' }}"
        working-directory: linkml-runtime
        run: |
          git remote add upstream https://github.com/linkml/linkml-runtime
          git fetch upstream --tags

      - name: Ensure tags for linkml if not run from main repo
        if: github.repository != 'linkml/linkml'
        working-directory: linkml
        run: |
          git remote add upstream https://github.com/linkml/linkml
          git fetch upstream --tags

      - name: Install poetry
        run: pipx install poetry

      - name: Install dynamic versioning plugin
        run: pipx inject poetry poetry-dynamic-versioning

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: linkml/.venv
          key: venv-${{ matrix.python-version }}-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      # note that we run the installation step always, even if we restore a venv,
      # the cache will restore the old version of linkml, but the lockfile
      # will only store the directory dependency (and thus will reinstall it)
      # the cache will still speedup the rest of the installation
      - name: Add checked-out linkml-runtime
        working-directory: linkml
        run: poetry add ../linkml-runtime

      - name: Update environment according to lockfile
        working-directory: linkml
        run: poetry sync --no-interaction --all-extras

      - name: print linkml-runtime version
        working-directory: linkml
        run: poetry run python -c 'from importlib.metadata import version; print(version("linkml-runtime"))'

      - name: run tests
        working-directory: linkml
        run: poetry run python -m pytest --with-slow
