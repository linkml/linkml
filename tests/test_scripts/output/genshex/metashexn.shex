# metamodel_version: 1.7.0
# version: 2.0.0
BASE <https://w3id.org/linkml/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>


<String> xsd:string

<Integer> xsd:integer

<Boolean> xsd:boolean

<Float> xsd:float

<Double> xsd:double

<Decimal> xsd:decimal

<Time> xsd:dateTime

<Date> xsd:date

<Datetime> xsd:dateTime

<Uriorcurie> IRI

<Uri> IRI

<Ncname> xsd:string

<Objectidentifier> IRI

<Nodeidentifier> NONLITERAL

<AltDescription> CLOSED {
    (  $<AltDescription_tes> (  <source> @<String> ;
          <description> @<String>
       ) ;
       rdf:type [ <AltDescription> ]
    )
}

<Annotatable> {
    (  $<Annotatable_tes> <annotations> @<Annotation> * ;
       rdf:type [ <Annotatable> ] ?
    )
}

<Annotation> CLOSED {
    (  $<Annotation_tes> (  &<Extension_tes> ;
          rdf:type [ <Extension> ] ? ;
          &<Annotatable_tes> ;
          rdf:type [ <Annotatable> ] ? ;
          <annotations> @<Annotation> *
       ) ;
       rdf:type [ <Annotation> ]
    )
}

<AnonymousClassExpression> CLOSED {
    (  $<AnonymousClassExpression_tes> (  &<AnonymousExpression_tes> ;
          rdf:type [ <AnonymousExpression> ] ? ;
          &<ClassExpression_tes> ;
          rdf:type [ <ClassExpression> ] ? ;
          <any_of> @<AnonymousClassExpression> * ;
          <exactly_one_of> @<AnonymousClassExpression> * ;
          <none_of> @<AnonymousClassExpression> * ;
          <all_of> @<AnonymousClassExpression> * ;
          <slot_conditions> @<SlotDefinition> *
       ) ;
       rdf:type [ <AnonymousClassExpression> ] ?
    )
}

<AnonymousExpression>  (
    @<AnonymousClassExpression> OR @<AnonymousSlotExpression>
)

<AnonymousExpression_struct> {
    (  $<AnonymousExpression_tes> (  &<Expression_tes> ;
          rdf:type [ <Expression> ] ? ;
          &<Extensible_tes> ;
          rdf:type [ <Extensible> ] ? ;
          &<Annotatable_tes> ;
          rdf:type [ <Annotatable> ] ? ;
          &<CommonMetadata_tes> ;
          rdf:type [ <CommonMetadata> ] ? ;
          <extensions> @<Extension> * ;
          <annotations> @<Annotation> * ;
          <description> @<String> ? ;
          <alt_descriptions> @<AltDescription> * ;
          <title> @<String> ? ;
          <deprecated> @<String> ? ;
          <todos> @<String> * ;
          <notes> @<String> * ;
          <comments> @<String> * ;
          <examples> @<Example> * ;
          <in_subset> @<SubsetDefinition> * ;
          <from_schema> @<Uri> ? ;
          <imported_from> @<String> ? ;
          <source> @<Uriorcurie> ? ;
          <in_language> @<String> ? ;
          <see_also> @<Uriorcurie> * ;
          <deprecated_element_has_exact_replacement> @<Uriorcurie> ? ;
          <deprecated_element_has_possible_replacement> @<Uriorcurie> ? ;
          <aliases> @<String> * ;
          <structured_aliases> @<StructuredAlias> * ;
          <mappings> @<Uriorcurie> * ;
          <exact_mappings> @<Uriorcurie> * ;
          <close_mappings> @<Uriorcurie> * ;
          <related_mappings> @<Uriorcurie> * ;
          <narrow_mappings> @<Uriorcurie> * ;
          <broad_mappings> @<Uriorcurie> * ;
          <rank> @<Integer> ?
       ) ;
       rdf:type [ <AnonymousExpression> ] ?
    )
}

<AnonymousSlotExpression> CLOSED {
    (  $<AnonymousSlotExpression_tes> (  &<AnonymousExpression_tes> ;
          rdf:type [ <AnonymousExpression> ] ? ;
          &<SlotExpression_tes> ;
          rdf:type [ <SlotExpression> ] ? ;
          <range> @<Element> ? ;
          <range_expression> @<AnonymousClassExpression> ? ;
          <required> @<Boolean> ? ;
          <recommended> @<Boolean> ? ;
          <inlined> @<Boolean> ? ;
          <inlined_as_list> @<Boolean> ? ;
          <minimum_value> @<Integer> ? ;
          <maximum_value> @<Integer> ? ;
          <pattern> @<String> ? ;
          <structured_pattern> @<PatternExpression> ? ;
          <equals_string> @<String> ? ;
          <equals_string_in> @<String> * ;
          <equals_number> @<Integer> ? ;
          <equals_expression> @<String> ? ;
          <minimum_cardinality> @<Integer> ? ;
          <maximum_cardinality> @<Integer> ? ;
          <has_member> @<AnonymousSlotExpression> ? ;
          <all_members> @<SlotDefinition> * ;
          <none_of> @<AnonymousSlotExpression> * ;
          <exactly_one_of> @<AnonymousSlotExpression> * ;
          <any_of> @<AnonymousSlotExpression> * ;
          <all_of> @<AnonymousSlotExpression> *
       ) ;
       rdf:type [ <AnonymousSlotExpression> ] ?
    )
}

<AnonymousTypeExpression> CLOSED {
    (  $<AnonymousTypeExpression_tes> (  &<TypeExpression_tes> ;
          rdf:type [ <TypeExpression> ] ? ;
          <pattern> @<String> ? ;
          <structured_pattern> @<PatternExpression> ? ;
          <equals_string> @<String> ? ;
          <equals_string_in> @<String> * ;
          <equals_number> @<Integer> ? ;
          <minimum_value> @<Integer> ? ;
          <maximum_value> @<Integer> ? ;
          <none_of> @<AnonymousTypeExpression> * ;
          <exactly_one_of> @<AnonymousTypeExpression> * ;
          <any_of> @<AnonymousTypeExpression> * ;
          <all_of> @<AnonymousTypeExpression> *
       ) ;
       rdf:type [ <AnonymousTypeExpression> ] ?
    )
}

<ClassDefinition> CLOSED {
    (  $<ClassDefinition_tes> (  &<Definition_tes> ;
          rdf:type [ <Definition> ] ? ;
          &<ClassExpression_tes> ;
          rdf:type [ <ClassExpression> ] ? ;
          <slots> @<SlotDefinition> * ;
          <slot_usage> @<SlotDefinition> * ;
          <attributes> @<SlotDefinition> * ;
          <class_uri> @<Uriorcurie> ? ;
          <subclass_of> @<Uriorcurie> ? ;
          <union_of> @<ClassDefinition> * ;
          <defining_slots> @<SlotDefinition> * ;
          <tree_root> @<Boolean> ? ;
          <unique_keys> @<UniqueKey> * ;
          <rules> @<ClassRule> * ;
          <classification_rules> @<AnonymousClassExpression> * ;
          <slot_names_unique> @<Boolean> ? ;
          <represents_relationship> @<Boolean> ? ;
          <disjoint_with> @<ClassDefinition> * ;
          <children_are_mutually_disjoint> @<Boolean> ? ;
          <mixins> @<ClassDefinition> * ;
          <apply_to> @<ClassDefinition> * ;
          <any_of> @<AnonymousClassExpression> * ;
          <exactly_one_of> @<AnonymousClassExpression> * ;
          <none_of> @<AnonymousClassExpression> * ;
          <all_of> @<AnonymousClassExpression> * ;
          <slot_conditions> @<SlotDefinition> *
       ) ;
       rdf:type [ <ClassDefinition> ]
    )
}

<ClassExpression> {
    (  $<ClassExpression_tes> (  <any_of> @<AnonymousClassExpression> * ;
          <exactly_one_of> @<AnonymousClassExpression> * ;
          <none_of> @<AnonymousClassExpression> * ;
          <all_of> @<AnonymousClassExpression> * ;
          <slot_conditions> @<SlotDefinition> *
       ) ;
       rdf:type [ <ClassExpression> ] ?
    )
}

<ClassLevelRule>  (
    {
       (  $<ClassLevelRule_tes> rdf:type . * ;
          rdf:type [ <ClassLevelRule> ] ?
       )
    } OR @<ClassRule>
)

<ClassRule> CLOSED {
    (  $<ClassRule_tes> (  &<ClassLevelRule_tes> ;
          rdf:type [ <ClassLevelRule> ] ? ;
          &<Extensible_tes> ;
          rdf:type [ <Extensible> ] ? ;
          &<Annotatable_tes> ;
          rdf:type [ <Annotatable> ] ? ;
          &<CommonMetadata_tes> ;
          rdf:type [ <CommonMetadata> ] ? ;
          <preconditions> @<AnonymousClassExpression> ? ;
          <postconditions> @<AnonymousClassExpression> ? ;
          <elseconditions> @<AnonymousClassExpression> ? ;
          <bidirectional> @<Boolean> ? ;
          <open_world> @<Boolean> ? ;
          <rank> @<Integer> ? ;
          <deactivated> @<Boolean> ? ;
          <extensions> @<Extension> * ;
          <annotations> @<Annotation> * ;
          <description> @<String> ? ;
          <alt_descriptions> @<AltDescription> * ;
          <title> @<String> ? ;
          <deprecated> @<String> ? ;
          <todos> @<String> * ;
          <notes> @<String> * ;
          <comments> @<String> * ;
          <examples> @<Example> * ;
          <in_subset> @<SubsetDefinition> * ;
          <from_schema> @<Uri> ? ;
          <imported_from> @<String> ? ;
          <source> @<Uriorcurie> ? ;
          <in_language> @<String> ? ;
          <see_also> @<Uriorcurie> * ;
          <deprecated_element_has_exact_replacement> @<Uriorcurie> ? ;
          <deprecated_element_has_possible_replacement> @<Uriorcurie> ? ;
          <aliases> @<String> * ;
          <structured_aliases> @<StructuredAlias> * ;
          <mappings> @<Uriorcurie> * ;
          <exact_mappings> @<Uriorcurie> * ;
          <close_mappings> @<Uriorcurie> * ;
          <related_mappings> @<Uriorcurie> * ;
          <narrow_mappings> @<Uriorcurie> * ;
          <broad_mappings> @<Uriorcurie> *
       ) ;
       rdf:type [ <ClassRule> ] ?
    )
}

<CommonMetadata> {
    (  $<CommonMetadata_tes> (  <description> @<String> ? ;
          <alt_descriptions> @<AltDescription> * ;
          <title> @<String> ? ;
          <deprecated> @<String> ? ;
          <todos> @<String> * ;
          <notes> @<String> * ;
          <comments> @<String> * ;
          <examples> @<Example> * ;
          <in_subset> @<SubsetDefinition> * ;
          <from_schema> @<Uri> ? ;
          <imported_from> @<String> ? ;
          <source> @<Uriorcurie> ? ;
          <in_language> @<String> ? ;
          <see_also> @<Uriorcurie> * ;
          <deprecated_element_has_exact_replacement> @<Uriorcurie> ? ;
          <deprecated_element_has_possible_replacement> @<Uriorcurie> ? ;
          <aliases> @<String> * ;
          <structured_aliases> @<StructuredAlias> * ;
          <mappings> @<Uriorcurie> * ;
          <exact_mappings> @<Uriorcurie> * ;
          <close_mappings> @<Uriorcurie> * ;
          <related_mappings> @<Uriorcurie> * ;
          <narrow_mappings> @<Uriorcurie> * ;
          <broad_mappings> @<Uriorcurie> * ;
          <rank> @<Integer> ?
       ) ;
       rdf:type [ <CommonMetadata> ] ?
    )
}

<Definition>  (
    @<ClassDefinition> OR @<SlotDefinition>
)

<Definition_struct> {
    (  $<Definition_tes> (  &<Element_tes> ;
          rdf:type [ <Element> ] ? ;
          <abstract> @<Boolean> ? ;
          <mixin> @<Boolean> ? ;
          <mixins> @<Definition> * ;
          <apply_to> @<Definition> * ;
          <values_from> @<Uriorcurie> * ;
          <created_by> @<Uriorcurie> ? ;
          <created_on> @<Datetime> ? ;
          <last_updated_on> @<Datetime> ? ;
          <modified_by> @<Uriorcurie> ? ;
          <status> @<Uriorcurie> ? ;
          <string_serialization> @<String> ?
       ) ;
       rdf:type [ <Definition> ]
    )
}

<Element>  (
    @<Definition> OR @<EnumDefinition> OR @<SchemaDefinition> OR @<SubsetDefinition> OR @<TypeDefinition>
)

<Element_struct> {
    (  $<Element_tes> (  &<Extensible_tes> ;
          rdf:type [ <Extensible> ] ? ;
          &<Annotatable_tes> ;
          rdf:type [ <Annotatable> ] ? ;
          &<CommonMetadata_tes> ;
          rdf:type [ <CommonMetadata> ] ? ;
          <id_prefixes> @<Ncname> * ;
          <definition_uri> @<Uriorcurie> ? ;
          <local_names> @<LocalName> * ;
          <conforms_to> @<String> ? ;
          <extensions> @<Extension> * ;
          <annotations> @<Annotation> * ;
          <description> @<String> ? ;
          <alt_descriptions> @<AltDescription> * ;
          <title> @<String> ? ;
          <deprecated> @<String> ? ;
          <todos> @<String> * ;
          <notes> @<String> * ;
          <comments> @<String> * ;
          <examples> @<Example> * ;
          <in_subset> @<SubsetDefinition> * ;
          <from_schema> @<Uri> ? ;
          <imported_from> @<String> ? ;
          <source> @<Uriorcurie> ? ;
          <in_language> @<String> ? ;
          <see_also> @<Uriorcurie> * ;
          <deprecated_element_has_exact_replacement> @<Uriorcurie> ? ;
          <deprecated_element_has_possible_replacement> @<Uriorcurie> ? ;
          <aliases> @<String> * ;
          <structured_aliases> @<StructuredAlias> * ;
          <mappings> @<Uriorcurie> * ;
          <exact_mappings> @<Uriorcurie> * ;
          <close_mappings> @<Uriorcurie> * ;
          <related_mappings> @<Uriorcurie> * ;
          <narrow_mappings> @<Uriorcurie> * ;
          <broad_mappings> @<Uriorcurie> * ;
          <rank> @<Integer> ?
       ) ;
       rdf:type [ <Element> ]
    )
}

<EnumDefinition> CLOSED {
    (  $<EnumDefinition_tes> (  &<Element_tes> ;
          rdf:type [ <Element> ] ? ;
          <code_set> @<Uriorcurie> ? ;
          <code_set_tag> @<String> ? ;
          <code_set_version> @<String> ? ;
          <pv_formula> @<PvFormulaOptions> ? ;
          <permissible_values> @<PermissibleValue> *
       ) ;
       rdf:type [ <EnumDefinition> ]
    )
}

<Example> CLOSED {
    (  $<Example_tes> (  <value> @<String> ? ;
          <description> @<String> ?
       ) ;
       rdf:type [ <Example> ] ?
    )
}

<Expression>  (
    @<SlotExpression> OR @<TypeExpression>
)

<Expression_struct> {
    (  $<Expression_tes> rdf:type . * ;
       rdf:type [ <Expression> ] ?
    )
}

<Extensible> {
    (  $<Extensible_tes> <extensions> @<Extension> * ;
       rdf:type [ <Extensible> ] ?
    )
}

<Extension>  (
    CLOSED {
       (  $<Extension_tes> (  <tag> @<Uriorcurie> ;
             <value> @<String> ;
             <extensions> @<Extension> *
          ) ;
          rdf:type [ <Extension> ]
       )
    } OR @<Annotation>
)

<ImportExpression> CLOSED {
    (  $<ImportExpression_tes> (  &<Extensible_tes> ;
          rdf:type [ <Extensible> ] ? ;
          &<Annotatable_tes> ;
          rdf:type [ <Annotatable> ] ? ;
          &<CommonMetadata_tes> ;
          rdf:type [ <CommonMetadata> ] ? ;
          <import_from> @<Uriorcurie> ;
          <import_as> @<Ncname> ? ;
          <import_map> @<Setting> * ;
          <extensions> @<Extension> * ;
          <annotations> @<Annotation> * ;
          <description> @<String> ? ;
          <alt_descriptions> @<AltDescription> * ;
          <title> @<String> ? ;
          <deprecated> @<String> ? ;
          <todos> @<String> * ;
          <notes> @<String> * ;
          <comments> @<String> * ;
          <examples> @<Example> * ;
          <in_subset> @<SubsetDefinition> * ;
          <from_schema> @<Uri> ? ;
          <imported_from> @<String> ? ;
          <source> @<Uriorcurie> ? ;
          <in_language> @<String> ? ;
          <see_also> @<Uriorcurie> * ;
          <deprecated_element_has_exact_replacement> @<Uriorcurie> ? ;
          <deprecated_element_has_possible_replacement> @<Uriorcurie> ? ;
          <aliases> @<String> * ;
          <structured_aliases> @<StructuredAlias> * ;
          <mappings> @<Uriorcurie> * ;
          <exact_mappings> @<Uriorcurie> * ;
          <close_mappings> @<Uriorcurie> * ;
          <related_mappings> @<Uriorcurie> * ;
          <narrow_mappings> @<Uriorcurie> * ;
          <broad_mappings> @<Uriorcurie> * ;
          <rank> @<Integer> ?
       ) ;
       rdf:type [ <ImportExpression> ] ?
    )
}

<LocalName> CLOSED {
    (  $<LocalName_tes> (  <local_name_source> @<Ncname> ;
          <local_name_value> @<String>
       ) ;
       rdf:type [ <LocalName> ]
    )
}

<PathExpression> CLOSED {
    (  $<PathExpression_tes> (  &<Expression_tes> ;
          rdf:type [ <Expression> ] ? ;
          &<Extensible_tes> ;
          rdf:type [ <Extensible> ] ? ;
          &<Annotatable_tes> ;
          rdf:type [ <Annotatable> ] ? ;
          &<CommonMetadata_tes> ;
          rdf:type [ <CommonMetadata> ] ? ;
          <followed_by> @<PathExpression> ? ;
          <none_of> @<PathExpression> * ;
          <any_of> @<PathExpression> * ;
          <all_of> @<PathExpression> * ;
          <exactly_one_of> @<PathExpression> * ;
          <reversed> @<Boolean> ? ;
          <traverse> @<SlotDefinition> ? ;
          <range_expression> @<AnonymousClassExpression> ? ;
          <extensions> @<Extension> * ;
          <annotations> @<Annotation> * ;
          <description> @<String> ? ;
          <alt_descriptions> @<AltDescription> * ;
          <title> @<String> ? ;
          <deprecated> @<String> ? ;
          <todos> @<String> * ;
          <notes> @<String> * ;
          <comments> @<String> * ;
          <examples> @<Example> * ;
          <in_subset> @<SubsetDefinition> * ;
          <from_schema> @<Uri> ? ;
          <imported_from> @<String> ? ;
          <source> @<Uriorcurie> ? ;
          <in_language> @<String> ? ;
          <see_also> @<Uriorcurie> * ;
          <deprecated_element_has_exact_replacement> @<Uriorcurie> ? ;
          <deprecated_element_has_possible_replacement> @<Uriorcurie> ? ;
          <aliases> @<String> * ;
          <structured_aliases> @<StructuredAlias> * ;
          <mappings> @<Uriorcurie> * ;
          <exact_mappings> @<Uriorcurie> * ;
          <close_mappings> @<Uriorcurie> * ;
          <related_mappings> @<Uriorcurie> * ;
          <narrow_mappings> @<Uriorcurie> * ;
          <broad_mappings> @<Uriorcurie> * ;
          <rank> @<Integer> ?
       ) ;
       rdf:type [ <PathExpression> ] ?
    )
}

<PatternExpression> CLOSED {
    (  $<PatternExpression_tes> (  &<Extensible_tes> ;
          rdf:type [ <Extensible> ] ? ;
          &<Annotatable_tes> ;
          rdf:type [ <Annotatable> ] ? ;
          &<CommonMetadata_tes> ;
          rdf:type [ <CommonMetadata> ] ? ;
          <syntax> @<String> ? ;
          <interpolated> @<Boolean> ? ;
          <partial_match> @<Boolean> ? ;
          <extensions> @<Extension> * ;
          <annotations> @<Annotation> * ;
          <description> @<String> ? ;
          <alt_descriptions> @<AltDescription> * ;
          <title> @<String> ? ;
          <deprecated> @<String> ? ;
          <todos> @<String> * ;
          <notes> @<String> * ;
          <comments> @<String> * ;
          <examples> @<Example> * ;
          <in_subset> @<SubsetDefinition> * ;
          <from_schema> @<Uri> ? ;
          <imported_from> @<String> ? ;
          <source> @<Uriorcurie> ? ;
          <in_language> @<String> ? ;
          <see_also> @<Uriorcurie> * ;
          <deprecated_element_has_exact_replacement> @<Uriorcurie> ? ;
          <deprecated_element_has_possible_replacement> @<Uriorcurie> ? ;
          <aliases> @<String> * ;
          <structured_aliases> @<StructuredAlias> * ;
          <mappings> @<Uriorcurie> * ;
          <exact_mappings> @<Uriorcurie> * ;
          <close_mappings> @<Uriorcurie> * ;
          <related_mappings> @<Uriorcurie> * ;
          <narrow_mappings> @<Uriorcurie> * ;
          <broad_mappings> @<Uriorcurie> * ;
          <rank> @<Integer> ?
       ) ;
       rdf:type [ <PatternExpression> ] ?
    )
}

<PermissibleValue> CLOSED {
    (  $<PermissibleValue_tes> (  &<Extensible_tes> ;
          rdf:type [ <Extensible> ] ? ;
          &<Annotatable_tes> ;
          rdf:type [ <Annotatable> ] ? ;
          &<CommonMetadata_tes> ;
          rdf:type [ <CommonMetadata> ] ? ;
          <description> @<String> ? ;
          <meaning> @<Uriorcurie> ? ;
          <mixins> @<PermissibleValue> * ;
          <extensions> @<Extension> * ;
          <annotations> @<Annotation> * ;
          <alt_descriptions> @<AltDescription> * ;
          <title> @<String> ? ;
          <deprecated> @<String> ? ;
          <todos> @<String> * ;
          <notes> @<String> * ;
          <comments> @<String> * ;
          <examples> @<Example> * ;
          <in_subset> @<SubsetDefinition> * ;
          <from_schema> @<Uri> ? ;
          <imported_from> @<String> ? ;
          <source> @<Uriorcurie> ? ;
          <in_language> @<String> ? ;
          <see_also> @<Uriorcurie> * ;
          <deprecated_element_has_exact_replacement> @<Uriorcurie> ? ;
          <deprecated_element_has_possible_replacement> @<Uriorcurie> ? ;
          <aliases> @<String> * ;
          <structured_aliases> @<StructuredAlias> * ;
          <mappings> @<Uriorcurie> * ;
          <exact_mappings> @<Uriorcurie> * ;
          <close_mappings> @<Uriorcurie> * ;
          <related_mappings> @<Uriorcurie> * ;
          <narrow_mappings> @<Uriorcurie> * ;
          <broad_mappings> @<Uriorcurie> * ;
          <rank> @<Integer> ?
       ) ;
       rdf:type [ <PermissibleValue> ]
    )
}

<Prefix> CLOSED {
    (  $<Prefix_tes> (  <prefix_prefix> @<Ncname> ;
          <prefix_reference> @<Uri>
       ) ;
       rdf:type [ <Prefix> ]
    )
}

<SchemaDefinition> CLOSED {
    (  $<SchemaDefinition_tes> (  &<Element_tes> ;
          rdf:type [ <Element> ] ? ;
          <id> @<Uri> ;
          <version> @<String> ? ;
          <imports> @<Uriorcurie> * ;
          <license> @<String> ? ;
          <prefixes> @<Prefix> * ;
          <emit_prefixes> @<Ncname> * ;
          <default_curi_maps> @<String> * ;
          <default_prefix> @<String> ? ;
          <default_range> @<TypeDefinition> ? ;
          <subsets> @<SubsetDefinition> * ;
          <types> @<TypeDefinition> * ;
          <enums> @<EnumDefinition> * ;
          <slots> @<SlotDefinition> * ;
          <classes> @<ClassDefinition> * ;
          <metamodel_version> @<String> ? ;
          <source_file> @<String> ? ;
          <source_file_date> @<Datetime> ? ;
          <source_file_size> @<Integer> ? ;
          <generation_date> @<Datetime> ? ;
          <slot_names_unique> @<Boolean> ? ;
          <settings> @<Setting> * ;
          <categories> @<Uriorcurie> * ;
          <keywords> @<String> *
       ) ;
       rdf:type [ <SchemaDefinition> ]
    )
}

<Setting> CLOSED {
    (  $<Setting_tes> (  <setting_key> @<Ncname> ;
          <setting_value> @<String>
       ) ;
       rdf:type [ <Setting> ]
    )
}

<SlotDefinition> CLOSED {
    (  $<SlotDefinition_tes> (  &<Definition_tes> ;
          rdf:type [ <Definition> ] ? ;
          &<SlotExpression_tes> ;
          rdf:type [ <SlotExpression> ] ? ;
          <singular_name> @<String> ? ;
          <domain> @<ClassDefinition> ? ;
          <slot_uri> @<Uriorcurie> ? ;
          <multivalued> @<Boolean> ? ;
          <inherited> @<Boolean> ? ;
          <readonly> @<String> ? ;
          <ifabsent> @<String> ? ;
          <list_elements_unique> @<Boolean> ? ;
          <list_elements_ordered> @<Boolean> ? ;
          <shared> @<Boolean> ? ;
          <key> @<Boolean> ? ;
          <identifier> @<Boolean> ? ;
          <designates_type> @<Boolean> ? ;
          <alias> @<String> ? ;
          <owner> @<Definition> ? ;
          <domain_of> @<ClassDefinition> * ;
          <subproperty_of> @<SlotDefinition> ? ;
          <symmetric> @<Boolean> ? ;
          <reflexive> @<Boolean> ? ;
          <locally_reflexive> @<Boolean> ? ;
          <irreflexive> @<Boolean> ? ;
          <asymmetric> @<Boolean> ? ;
          <transitive> @<Boolean> ? ;
          <inverse> @<SlotDefinition> ? ;
          <is_class_field> @<Boolean> ? ;
          <transitive_form_of> @<SlotDefinition> ? ;
          <reflexive_transitive_form_of> @<SlotDefinition> ? ;
          <role> @<String> ? ;
          <is_usage_slot> @<Boolean> ? ;
          <usage_slot_name> @<String> ? ;
          <relational_role> @<RelationalRoleEnum> ? ;
          <slot_group> @<SlotDefinition> ? ;
          <is_grouping_slot> @<Boolean> ? ;
          <path_rule> @<PathExpression> ? ;
          <disjoint_with> @<SlotDefinition> * ;
          <children_are_mutually_disjoint> @<Boolean> ? ;
          <mixins> @<SlotDefinition> * ;
          <apply_to> @<SlotDefinition> * ;
          <range> @<Element> ? ;
          <range_expression> @<AnonymousClassExpression> ? ;
          <required> @<Boolean> ? ;
          <recommended> @<Boolean> ? ;
          <inlined> @<Boolean> ? ;
          <inlined_as_list> @<Boolean> ? ;
          <minimum_value> @<Integer> ? ;
          <maximum_value> @<Integer> ? ;
          <pattern> @<String> ? ;
          <structured_pattern> @<PatternExpression> ? ;
          <equals_string> @<String> ? ;
          <equals_string_in> @<String> * ;
          <equals_number> @<Integer> ? ;
          <equals_expression> @<String> ? ;
          <minimum_cardinality> @<Integer> ? ;
          <maximum_cardinality> @<Integer> ? ;
          <has_member> @<AnonymousSlotExpression> ? ;
          <all_members> @<SlotDefinition> * ;
          <none_of> @<AnonymousSlotExpression> * ;
          <exactly_one_of> @<AnonymousSlotExpression> * ;
          <any_of> @<AnonymousSlotExpression> * ;
          <all_of> @<AnonymousSlotExpression> *
       ) ;
       rdf:type [ <SlotDefinition> ]
    )
}

<SlotExpression> {
    (  $<SlotExpression_tes> (  &<Expression_tes> ;
          rdf:type [ <Expression> ] ? ;
          <range> @<Element> ? ;
          <range_expression> @<AnonymousClassExpression> ? ;
          <required> @<Boolean> ? ;
          <recommended> @<Boolean> ? ;
          <inlined> @<Boolean> ? ;
          <inlined_as_list> @<Boolean> ? ;
          <minimum_value> @<Integer> ? ;
          <maximum_value> @<Integer> ? ;
          <pattern> @<String> ? ;
          <structured_pattern> @<PatternExpression> ? ;
          <equals_string> @<String> ? ;
          <equals_string_in> @<String> * ;
          <equals_number> @<Integer> ? ;
          <equals_expression> @<String> ? ;
          <minimum_cardinality> @<Integer> ? ;
          <maximum_cardinality> @<Integer> ? ;
          <has_member> @<AnonymousSlotExpression> ? ;
          <all_members> @<SlotDefinition> * ;
          <none_of> @<AnonymousSlotExpression> * ;
          <exactly_one_of> @<AnonymousSlotExpression> * ;
          <any_of> @<AnonymousSlotExpression> * ;
          <all_of> @<AnonymousSlotExpression> *
       ) ;
       rdf:type [ <SlotExpression> ] ?
    )
}

<StructuredAlias> CLOSED {
    (  $<StructuredAlias_tes> (  &<Expression_tes> ;
          rdf:type [ <Expression> ] ? ;
          &<Extensible_tes> ;
          rdf:type [ <Extensible> ] ? ;
          &<Annotatable_tes> ;
          rdf:type [ <Annotatable> ] ? ;
          &<CommonMetadata_tes> ;
          rdf:type [ <CommonMetadata> ] ? ;
          <literal_form> @<String> ;
          <predicate> @<AliasPredicateEnum> ? ;
          <categories> @<Uriorcurie> * ;
          <extensions> @<Extension> * ;
          <annotations> @<Annotation> * ;
          <description> @<String> ? ;
          <alt_descriptions> @<AltDescription> * ;
          <title> @<String> ? ;
          <deprecated> @<String> ? ;
          <todos> @<String> * ;
          <notes> @<String> * ;
          <comments> @<String> * ;
          <examples> @<Example> * ;
          <in_subset> @<SubsetDefinition> * ;
          <from_schema> @<Uri> ? ;
          <imported_from> @<String> ? ;
          <source> @<Uriorcurie> ? ;
          <in_language> @<String> ? ;
          <see_also> @<Uriorcurie> * ;
          <deprecated_element_has_exact_replacement> @<Uriorcurie> ? ;
          <deprecated_element_has_possible_replacement> @<Uriorcurie> ? ;
          <aliases> @<String> * ;
          <structured_aliases> @<StructuredAlias> * ;
          <mappings> @<Uriorcurie> * ;
          <exact_mappings> @<Uriorcurie> * ;
          <close_mappings> @<Uriorcurie> * ;
          <related_mappings> @<Uriorcurie> * ;
          <narrow_mappings> @<Uriorcurie> * ;
          <broad_mappings> @<Uriorcurie> * ;
          <rank> @<Integer> ?
       ) ;
       rdf:type [ <StructuredAlias> ] ?
    )
}

<SubsetDefinition> CLOSED {
    (  $<SubsetDefinition_tes> (  &<Element_tes> ;
          rdf:type [ <Element> ] ?
       ) ;
       rdf:type [ <SubsetDefinition> ]
    )
}

<TypeDefinition> CLOSED {
    (  $<TypeDefinition_tes> (  &<Element_tes> ;
          rdf:type [ <Element> ] ? ;
          &<TypeExpression_tes> ;
          rdf:type [ <TypeExpression> ] ? ;
          <typeof> @<TypeDefinition> ? ;
          <base> @<String> ? ;
          <uri> @<Uriorcurie> ? ;
          <repr> @<String> ? ;
          <pattern> @<String> ? ;
          <structured_pattern> @<PatternExpression> ? ;
          <equals_string> @<String> ? ;
          <equals_string_in> @<String> * ;
          <equals_number> @<Integer> ? ;
          <minimum_value> @<Integer> ? ;
          <maximum_value> @<Integer> ? ;
          <none_of> @<AnonymousTypeExpression> * ;
          <exactly_one_of> @<AnonymousTypeExpression> * ;
          <any_of> @<AnonymousTypeExpression> * ;
          <all_of> @<AnonymousTypeExpression> *
       ) ;
       rdf:type [ <TypeDefinition> ]
    )
}

<TypeExpression> {
    (  $<TypeExpression_tes> (  &<Expression_tes> ;
          rdf:type [ <Expression> ] ? ;
          <pattern> @<String> ? ;
          <structured_pattern> @<PatternExpression> ? ;
          <equals_string> @<String> ? ;
          <equals_string_in> @<String> * ;
          <equals_number> @<Integer> ? ;
          <minimum_value> @<Integer> ? ;
          <maximum_value> @<Integer> ? ;
          <none_of> @<AnonymousTypeExpression> * ;
          <exactly_one_of> @<AnonymousTypeExpression> * ;
          <any_of> @<AnonymousTypeExpression> * ;
          <all_of> @<AnonymousTypeExpression> *
       ) ;
       rdf:type [ <TypeExpression> ] ?
    )
}

<UniqueKey> CLOSED {
    (  $<UniqueKey_tes> (  &<Extensible_tes> ;
          rdf:type [ <Extensible> ] ? ;
          &<Annotatable_tes> ;
          rdf:type [ <Annotatable> ] ? ;
          &<CommonMetadata_tes> ;
          rdf:type [ <CommonMetadata> ] ? ;
          <unique_key_name> @<String> ;
          <unique_key_slots> @<SlotDefinition> + ;
          <extensions> @<Extension> * ;
          <annotations> @<Annotation> * ;
          <description> @<String> ? ;
          <alt_descriptions> @<AltDescription> * ;
          <title> @<String> ? ;
          <deprecated> @<String> ? ;
          <todos> @<String> * ;
          <notes> @<String> * ;
          <comments> @<String> * ;
          <examples> @<Example> * ;
          <in_subset> @<SubsetDefinition> * ;
          <from_schema> @<Uri> ? ;
          <imported_from> @<String> ? ;
          <source> @<Uriorcurie> ? ;
          <in_language> @<String> ? ;
          <see_also> @<Uriorcurie> * ;
          <deprecated_element_has_exact_replacement> @<Uriorcurie> ? ;
          <deprecated_element_has_possible_replacement> @<Uriorcurie> ? ;
          <aliases> @<String> * ;
          <structured_aliases> @<StructuredAlias> * ;
          <mappings> @<Uriorcurie> * ;
          <exact_mappings> @<Uriorcurie> * ;
          <close_mappings> @<Uriorcurie> * ;
          <related_mappings> @<Uriorcurie> * ;
          <narrow_mappings> @<Uriorcurie> * ;
          <broad_mappings> @<Uriorcurie> * ;
          <rank> @<Integer> ?
       ) ;
       rdf:type [ <UniqueKey> ]
    )
}



